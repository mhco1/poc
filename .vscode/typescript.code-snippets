{
	// Place your poc workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"constructor function": {
		"scope": "javascript,typescript",
		"prefix": "_crf",
		"body": [
			"export const ${1:module} =  (${2:/*defaults*/}) => {",
			"    type t_Object = { [key: string]: any };",
			"    type t_res = { (): any, deb: t_Object, fn: t_Object };",
			"",
			"    let res;",
			"",
			"    const This = {",
			"        ${3:// object this}",
			"    }",
			"",
			"    const fn = {};",
			"",
			"    ${4:// code to constructor}",
			"",
			"    res = (() => {",
			"",
			"        ${0:// code to execution}",
			"",
			"    }) as t_res;",
			"",
			"    res.deb = This;",
			"    res.fn = fn;",
			"",
			"    return res",
			"}"
		],
		"description": "create constructor with function return"
	},
	"constructor object": {
		"scope": "javascript,typescript",
		"prefix": "_cro",
		"body": [
			"export const ${1:module} =  (${2:/*defaults*/}) => {",
			"    type t_Object = { [key: string]: any };",
			"    type t_res = { (): t_Object, deb: t_Object, fn: t_Object };",
			"",
			"    let res;",
			"",
			"    const This = {",
			"        ${3:// object this}",
			"    }",
			"",
			"    const fn = {};",
			"",
			"    ${4:// code to constructor}",
			"",
			"    res = (() => ({",
			"",
			"        ${0:// code to export}",
			"",
			"    })) as t_res;",
			"",
			"    res.deb = This;",
			"    res.fn = fn;",
			"",
			"    return res",
			"}"
		],
		"description": "create constructor with object return"
	},
	"import all": {
		"scope": "javascript,typescript",
		"prefix": "_imp",
		"body": [
			"import * as ${1:name} from '$0'"
		],
		"description": "import all"
	},
	"import specific": {
		"scope": "javascript,typescript",
		"prefix": "__imp",
		"body": [
			"import { ${1:name} } from '$0'"
		],
		"description": "import specific"
	},
	"pipe": {
		"scope": "javascript,typescript",
		"prefix": "_pipe",
		"body": [
			"export const _pipe = {",
			"    name: \"${1:name}\",",
			"    path: \"${2:path}\",",
			"    isEnd: ${3:false},",
			"    /*context: ${4:undefined},*/",
			"    fn: (${5:context}) => (${6:/*arguments*/}) => {",
			"        ${0:/*code...*/}",
			"    }",
			"}"
		],
		"description": "generate pipe export"
	}
}